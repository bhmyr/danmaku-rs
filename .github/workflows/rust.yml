name: Release Build

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - platform: linux
            runs_on: ubuntu-latest
            binary_name: danmaku-rs
            target: x86_64-unknown-linux-gnu
          - platform: macos
            runs_on: macos-latest
            binary_name: danmaku-rs
            target: x86_64-apple-darwin
          - platform: windows
            runs_on: windows-latest
            binary_name: danmaku-rs.exe
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    # 添加目标平台安装步骤
    - name: Install Rust target
      run: rustup target add ${{ matrix.target }}

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build for ${{ matrix.platform }} (${{ matrix.target }})
      run: |
        # 显式显示构建目录结构用于调试
        echo "Target directory structure:"
        ls -la target/ || true
        ls -la target/x86_64-unknown-linux-gnu/release || true
        
        # 执行构建
        cargo build --release --target ${{ matrix.target }}
        
        # 再次显示构建结果用于验证
        echo "Build output:"
        ls -la target/${{ matrix.target }}/release/
        
        # 复制二进制文件
        mkdir -p build/${{ matrix.platform }}
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} build/${{ matrix.platform }}/
      shell: bash

    - name: Prepare bundle files
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          cp config.toml livers.toml readme.md "build/${{ matrix.platform }}/"
          cp windows.ps1 "build/${{ matrix.platform }}/"
        else
          cp config.toml livers.toml readme.md "build/${{ matrix.platform }}/"
          if [ "${{ matrix.platform }}" = "linux" ]; then
            cp linux.sh "build/${{ matrix.platform }}/"
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            cp macos.sh "build/${{ matrix.platform }}/"
          fi
        fi
      shell: bash

    - name: Create ZIP archive
      run: |
        cd build/${{ matrix.platform }}
        if [ "${{ matrix.platform }}" = "windows" ]; then
          Compress-Archive -Path * -DestinationPath "../danmaku-rs-${{ matrix.platform }}.zip"
        else
          zip -r "../danmaku-rs-${{ matrix.platform }}.zip" ./*
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: danmaku-rs-${{ matrix.platform }}
        path: build/danmaku-rs-${{ matrix.platform }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: danmaku-rs-*
        merge-multiple: true

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/danmaku-rs-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
