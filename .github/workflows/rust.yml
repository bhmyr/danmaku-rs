name: Release Build

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - platform: linux
            target: x86_64-unknown-linux-gnu
            binary_name: danmaku
          - platform: macos
            target: aarch64-apple-darwin
            binary_name: danmaku
          - platform: windows
            target: x86_64-pc-windows-msvc
            binary_name: danmaku.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build for ${{ matrix.platform }} (${{ matrix.target }})
      run: |
        cargo build --release --target ${{ matrix.target }}
        mkdir -p build/${{ matrix.platform }}-${{ matrix.target }}
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} build/${{ matrix.platform }}-${{ matrix.target }}/

    - name: Prepare bundle files
      run: |
        # 复制通用文件
        cp config.toml livers.toml readme.txt build/${{ matrix.platform }}-${{ matrix.target }}/
        
        # 复制平台特定脚本
        if [ "${{ matrix.platform }}" = "linux" ]; then
          cp linux.sh build/${{ matrix.platform }}-${{ matrix.target }}/
        elif [ "${{ matrix.platform }}" = "windows" ]; then
          cp windows.ps1 build/${{ matrix.platform }}-${{ matrix.target }}/
        elif [ "${{ matrix.platform }}" = "macos" ]; then
          cp macos.sh build/${{ matrix.platform }}-${{ matrix.target }}/
        fi

    - name: Create ZIP archive
      run: |
        cd build/${{ matrix.platform }}-${{ matrix.target }}
        zip -r ../danmaku-${{ matrix.platform }}-${{ matrix.target }}.zip ./*
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: danmaku-${{ matrix.platform }}-${{ matrix.target }}.zip
        path: build/danmaku-${{ matrix.platform }}-${{ matrix.target }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: app-*.zip

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/app-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}