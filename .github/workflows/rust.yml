name: Release Build

on:
  release:
    types: [created]

jobs:
  build:
    strategy:
      matrix:
        include:
          - platform: linux
            target: x86_64-unknown-linux-gnu
            runner: ubuntu-latest
            shell: bash
            binary_name: danmaku
          - platform: macos
            target: aarch64-apple-darwin
            runner: macos-latest
            shell: bash
            binary_name: danmaku
          - platform: windows
            target: x86_64-pc-windows-msvc
            runner: windows-latest
            shell: pwsh
            binary_name: danmaku.exe
    
    runs-on: ${{ matrix.runner }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build binary
      run: cargo build --release --target ${{ matrix.target }}
      shell: ${{ matrix.shell }}

    - name: Prepare bundle files
      shell: ${{ matrix.shell }}
      run: |
        # 创建输出目录
        mkdir -p build/${{ matrix.platform }}
        
        # 复制可执行文件
        cp target/${{ matrix.target }}/release/${{ matrix.binary_name }} build/${{ matrix.platform }}/
        
        # 复制通用配置文件
        cp config.toml livers.toml readme.txt build/${{ matrix.platform }}/
        
        # 复制平台脚本
        if ("${{ matrix.platform }}" -eq "linux") {
          cp linux.sh build/${{ matrix.platform }}/
        } elseif ("${{ matrix.platform }}" -eq "macos") {
          cp macos.sh build/${{ matrix.platform }}/
        } elseif ("${{ matrix.platform }}" -eq "windows") {
          cp windows.ps1 build/${{ matrix.platform }}/
        }

    - name: Create ZIP archive
      shell: ${{ matrix.shell }}
      run: |
        cd build/${{ matrix.platform }}
        Compress-Archive -Path * -DestinationPath ../danmaku-${{ matrix.platform }}.zip  # Windows
        # 其他系统使用: zip -r ../danmaku-${{ matrix.platform }}.zip ./*
      if: matrix.platform == 'windows'
    
    - name: Create ZIP archive (Unix)
      shell: bash
      run: |
        cd build/${{ matrix.platform }}
        zip -r ../danmaku-${{ matrix.platform }}.zip ./*
      if: matrix.platform != 'windows'

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: danmaku-${{ matrix.platform }}.zip
        path: build/danmaku-${{ matrix.platform }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: danmaku-*.zip

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/danmaku-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
