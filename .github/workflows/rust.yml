name: Release Build

on:
  release:
    types: [created]

jobs:
  build:
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix:
        include:
          - platform: linux
            runs_on: ubuntu-latest
            binary_name: danmaku
            target: x86_64-unknown-linux-gnu
          - platform: macos
            runs_on: macos-latest
            binary_name: danmaku
            target: x86_64-apple-darwin
          - platform: windows
            runs_on: windows-latest
            binary_name: danmaku.exe
            target: x86_64-pc-windows-msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Cache Cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.target }}-
          ${{ runner.os }}-cargo-

    - name: Build for ${{ matrix.platform }}
      run: |
        cargo build --release --target ${{ matrix.target }}
        mkdir -p build/${{ matrix.platform }}
        if [ "${{ matrix.platform }}" = "windows" ]; then
          copy "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "build/${{ matrix.platform }}/"
        else
          cp "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "build/${{ matrix.platform }}/"
        fi
      shell: bash

    - name: Prepare bundle files
      run: |
        if [ "${{ matrix.platform }}" = "windows" ]; then
          copy "config.toml" "livers.toml" "readme.txt" "build/${{ matrix.platform }}/"
          copy "windows.ps1" "build/${{ matrix.platform }}/"
        else
          cp config.toml livers.toml readme.txt "build/${{ matrix.platform }}/"
          if [ "${{ matrix.platform }}" = "linux" ]; then
            cp linux.sh "build/${{ matrix.platform }}/"
          elif [ "${{ matrix.platform }}" = "macos" ]; then
            cp macos.sh "build/${{ matrix.platform }}/"
          fi
        fi
      shell: bash

    - name: Create ZIP archive
      run: |
        cd build/${{ matrix.platform }}
        if [ "${{ matrix.platform }}" = "windows" ]; then
          7z a "../danmaku-${{ matrix.platform }}.zip" ./*
        else
          zip -r "../danmaku-${{ matrix.platform }}.zip" ./*
        fi
      shell: bash

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: danmaku-${{ matrix.platform }}
        path: build/danmaku-${{ matrix.platform }}.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        pattern: danmaku-*.zip
        merge-multiple: true

    - name: Publish Release
      uses: softprops/action-gh-release@v1
      with:
        files: artifacts/danmaku-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
